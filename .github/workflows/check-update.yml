#
# Copyright (c) 2022-2024 SMALLPROGRAM <https://github.com/smallprogram>
# Description: Auto update packages v2
#
name: "Check update"
on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: "0 */4 * * *"
env:
  TZ: Asia/Shanghai


jobs:
  job_init:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4


      - name: Initialization environment
        run: |
          sudo timedatectl set-timezone "$TZ"


      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 0
        
  job_auto_update_packages:
    if: ${{ always() }}
    needs: job_init
    runs-on: ubuntu-latest
    name: Auto-update-${{ matrix.pakcages }} 
    strategy:
      fail-fast: false
      matrix:
        pakcages: [caddy]
        include:
          - pakcages: caddy
            tag_file: tag
            release_api_command: curl -sL https://api.github.com/repos/caddyserver/caddy/releases | jq -r 'map(select(.prerelease|not)) | first | .tag_name' | sed -e 's/^v//'

    steps:
      - name: Checkout
        uses: actions/checkout@v4


      - name: Initialization environment
        run: |
          cd && mkdir -p packages && cd packages
          sudo timedatectl set-timezone "$TZ"

      - name: Check ${{ matrix.pakcages }}
        id: check
        run: |
          is_continue=true
          
          if [ "$is_continue" = "true" ]; then
            cd && cd $GITHUB_WORKSPACE
            Old_PKG_VERSION=$(cat ${{ matrix.tag_file}})
            New_PKG_VERSION=$(${{ matrix.release_api_command }})
            echo "${{ matrix.pakcages }}目前版本: $Old_PKG_VERSION"
            echo "${{ matrix.pakcages }}最新版本: $New_PKG_VERSION"
            if [ "$Old_PKG_VERSION" = "$New_PKG_VERSION" ]; then 
              echo "status=failure" >> $GITHUB_OUTPUT; 
              echo "${{ matrix.pakcages }}版本为最新版本$New_PKG_VERSION,无需更新"; 
            else 
              echo "New_PKG_VERSION=$New_PKG_VERSION" >> $GITHUB_OUTPUT;  
              echo "status=success" >> $GITHUB_OUTPUT;
            fi
          else
            echo "status=failure" >> $GITHUB_OUTPUT;
          fi


      - name: Update ${{ matrix.pakcages }}
        id: update
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && !cancelled()
        run: |
          cd && cd $GITHUB_WORKSPACE
          New_PKG_VERSION=${{ steps.check.outputs.New_PKG_VERSION }}
          echo $New_PKG_VERSION > tag
          echo "已更新${{ matrix.pakcages }}版本到: $New_PKG_VERSION"
          cd && cd packages
          echo ":white_check_mark: ${{ matrix.pakcages }}: update to $New_PKG_VERSION" >> commit_messages.txt
          echo "version=$New_PKG_VERSION" >> $GITHUB_OUTPUT

          cd && cd $GITHUB_WORKSPACE
          echo "branch_exists=$(git ls-remote --heads origin patches-${{ matrix.pakcages }}-$New_PKG_VERSION | tr -d '\n')" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        id: cpr
        if: steps.check.outputs.status == 'success' && steps.check.outputs.New_PKG_VERSION != '' && steps.update.outputs.branch_exists == '' && !cancelled()
        uses: peter-evans/create-pull-request@v6.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "${{ matrix.pakcages }}: update to ${{ steps.update.outputs.version }}"
          committer: Gzxhwq <gzxhwq@gmail.com>
          author: Gzxhwq <gzxhwq@gmail.com>
          signoff: false
          branch: patches-${{ matrix.pakcages }}-${{ steps.update.outputs.version }}
          base: main
          delete-branch: true
          body: |
            ${{ matrix.pakcages }}: update to ${{ steps.update.outputs.version }}
          title: "${{ matrix.pakcages }}: update to ${{ steps.update.outputs.version }}"
          labels: |
            automated-pr
          draft: false
